/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _INTERFACE_H_RPCGEN
#define _INTERFACE_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct resource {
	char *res_type;
	char *perms;
};
typedef struct resource resource;

struct user {
	char *username;
	char *req_auth_token;
	char *resources_token;
	char *reg_token;
	int val_time;
	int automatic_refresh;
	struct resource *res;
};
typedef struct user user;

struct token_pair {
	char *resources_token;
	char *reg_token;
	int val_time;
};
typedef struct token_pair token_pair;

struct status {
	struct token_pair pair;
	char *stat;
};
typedef struct status status;

struct request_access_token_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
	int arg4;
};
typedef struct request_access_token_1_argument request_access_token_1_argument;

struct validate_delegated_action_1_argument {
	char *arg1;
	char *arg2;
	char *arg3;
};
typedef struct validate_delegated_action_1_argument validate_delegated_action_1_argument;

#define INTERFACE_PROG 0x33554466
#define INTERFACE_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1(char *, CLIENT *);
extern  char ** request_authorization_1_svc(char *, struct svc_req *);
#define APPROVE_REQUEST 2
extern  char ** approve_request_1(char *, CLIENT *);
extern  char ** approve_request_1_svc(char *, struct svc_req *);
#define REQUEST_ACCESS_TOKEN 3
extern  struct token_pair * request_access_token_1(char *, char *, char *, int , CLIENT *);
extern  struct token_pair * request_access_token_1_svc(char *, char *, char *, int , struct svc_req *);
#define VALIDATE_DELEGATED_ACTION 4
extern  struct status * validate_delegated_action_1(char *, char *, char *, CLIENT *);
extern  struct status * validate_delegated_action_1_svc(char *, char *, char *, struct svc_req *);
extern int interface_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1();
extern  char ** request_authorization_1_svc();
#define APPROVE_REQUEST 2
extern  char ** approve_request_1();
extern  char ** approve_request_1_svc();
#define REQUEST_ACCESS_TOKEN 3
extern  struct token_pair * request_access_token_1();
extern  struct token_pair * request_access_token_1_svc();
#define VALIDATE_DELEGATED_ACTION 4
extern  struct status * validate_delegated_action_1();
extern  struct status * validate_delegated_action_1_svc();
extern int interface_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_resource (XDR *, resource*);
extern  bool_t xdr_user (XDR *, user*);
extern  bool_t xdr_token_pair (XDR *, token_pair*);
extern  bool_t xdr_status (XDR *, status*);
extern  bool_t xdr_request_access_token_1_argument (XDR *, request_access_token_1_argument*);
extern  bool_t xdr_validate_delegated_action_1_argument (XDR *, validate_delegated_action_1_argument*);

#else /* K&R C */
extern bool_t xdr_resource ();
extern bool_t xdr_user ();
extern bool_t xdr_token_pair ();
extern bool_t xdr_status ();
extern bool_t xdr_request_access_token_1_argument ();
extern bool_t xdr_validate_delegated_action_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_INTERFACE_H_RPCGEN */
